// Generated by CoffeeScript 1.4.0
(function() {
  var contains, filter, hide, parse_search, search_split, some;

  this.Crutch = {};

  search_split = new RegExp(" +");

  $(document).ready(function() {
    var search_hndl, template;
    template = Handlebars.compile(_template);
    $("body").append(template(_data));
    search_hndl = function(e) {
      var query, val;
      if (e != null) {
        if (e.keyCode === 27) {
          $("#search").val("");
        }
      }
      val = $("#search").val();
      query = parse_search(val);
      return filter(query);
    };
    this.Crutch.filter = search_hndl;
    $("#search").on("keyup", search_hndl);
    $(document).on("keyup", function(e) {
      if (e.keyCode === 27) {
        return $("#search").focus();
      }
    });
    $(".project_active").on("click", search_hndl);
    return filter(parse_search(""));
  });

  hide = function(uid) {
    return $("#" + uid).addClass('hidden');
  };

  parse_search = function(str) {
    var group, prj_ind, projects, sec_ind, sections, terms, _fn, _i, _len, _ref;
    prj_ind = "@";
    sec_ind = "#";
    terms = [];
    projects = [];
    sections = [];
    _ref = str.trim().split(search_split);
    _fn = function(group) {
      if (group.indexOf(prj_ind) === 0) {
        if (group.length > prj_ind.length) {
          return projects.push(group.substring(prj_ind.length));
        }
      } else if (group.indexOf(sec_ind) === 0) {
        if (group.length > sec_ind.length) {
          return sections.push(group.substring(sec_ind.length));
        }
      } else {
        return terms.push(group);
      }
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      group = _ref[_i];
      _fn(group);
    }
    return {
      terms: terms,
      projects: projects,
      sections: sections
    };
  };

  contains = function(list, elem) {
    var e, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      e = list[_i];
      if (e === elem) {
        return true;
      }
    }
    return false;
  };

  some = function(list, test) {
    var e, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      e = list[_i];
      if (test(e)) {
        return true;
      }
    }
    return false;
  };

  filter = function(query) {
    var active_project_uid, active_projects, e, entry, entry_found, entry_idx, matched, project, project_disabled, regexes, section_disabled, section_found, section_idx, _i, _len, _ref, _results;
    $(".entry, .section, .project").removeClass("hidden");
    active_projects = $(".project_active:checked");
    active_project_uid = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = active_projects.length; _i < _len; _i++) {
        e = active_projects[_i];
        _results.push(parseInt($(e).attr("data-uid")));
      }
      return _results;
    })();
    regexes = (function() {
      var _i, _len, _ref, _results;
      _ref = query.terms;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(new RegExp(e, "i"));
      }
      return _results;
    })();
    _ref = _data.projects;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      project = _ref[_i];
      section_found = false;
      project_disabled = false;
      if (!contains(active_project_uid, project.uid) || (query.projects.length > 0 && some(query.projects, function(search) {
        return project.project.toLowerCase().indexOf(search.toLowerCase()) !== 0;
      }))) {
        project_disabled = true;
      }
      section_idx = 0;
      while (section_idx < project["sections"].length) {
        entry_found = false;
        section_disabled = false;
        if (query.sections.length > 0 && some(query.sections, function(search) {
          return project.sections[section_idx].section.toLowerCase().indexOf(search.toLowerCase()) !== 0;
        })) {
          section_disabled = true;
        }
        entry_idx = 0;
        while (entry_idx < project["sections"][section_idx]["entries"].length) {
          entry = project["sections"][section_idx]["entries"][entry_idx];
          matched = true;
          if (project_disabled || section_disabled || regexes.length > 0 && some(regexes, function(re) {
            if (entry.term != null) {
              return entry.description.search(re) === -1 && entry.term.search(re) === -1;
            } else {
              return entry.description.search(re) === -1;
            }
          })) {
            matched = false;
          }
          if (matched) {
            entry_found = true;
            section_found = true;
          } else {
            $("#" + entry["uid"]).addClass("hidden");
          }
          entry_idx++;
        }
        if (!entry_found) {
          hide(project["sections"][section_idx]["uid"]);
        }
        section_idx++;
      }
      if (!section_found) {
        _results.push(hide(project["uid"]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
