section: All
url: https://developer.mozilla.org/en-US/docs/CSS/{entry}
sort: fixed
entries:
    - [active, "The :active pseudo-class matches when an element is being activated by the user. It allows the page to give a feedback that the activation has been detected by the browser. When interacting with a mouse, this is typically the time between the user presses the mouse button and releases it. It is often used on <a> and <button> HTML elements.    en"]
    - ["::after", ":after creates a pseudo-element that is the last child of the element matched. Typically used to add cosmetic content to an element, by using the content CSS property. This element is inline by default. element:after { style properties } /* CSS2 syntax */ element::after { style properties } /* CSS3 syntax */   en"]
    - ["align-content", "The align-content CSS property aligns a flex container's lines within the flex container when there is extra space on the cross-axis. Formal grammar: <align-content> where <align-content> is flex-start | flex-end | center | justify | distribute | stretch align-content: flex-start | flex-end | center | justify | distribute | stretch   en"]
    - ["align-items", "The align-items CSS property aligns flex items of the current flex line the same way as justify-content but in the perpendicular direction. Formal grammar: <align-items> where <align-items> is flex-start | flex-end | center | baseline | stretch align-items: flex-start | flex-end | center | baseline | stretch   en"]
    - ["align-self", "The align-self CSS property aligns flex items of the current flex line overriding the align-items value. Formal grammar: <align-self> where <align-self> is auto | flex-start | flex-end | center | baseline | stretch align-self: auto | flex-start | flex-end | center | baseline | stretch   en"]
    - [angle, "The <angle> CSS data type represents angle values. Positive angles represent right angles, negative angles represent left angles. Its syntax is a <number> data type immediately followed by the unit (deg, grad, rad or turn). Like for any CSS dimension, there is no space between the unit literal and the number.    en"]
    - [animation, "The animation CSS property is a shorthand property for animation-name , animation-duration , animation-timing-function , animation-delay , animation-iteration-count and animation-direction . animation: [ <animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] [, [<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] ]*   en"]
    - ["animation-delay", "The animation-delay CSS property specifies when the animation should start. This lets the animation sequence begin some time after it's applied to an element. animation-delay: <time> [, <time>]*   en"]
    - ["animation-direction", "The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles. animation-direction: normal | alternate [, normal | alternate]*   en"]
    - ["animation-duration", "The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle. animation-duration: <time> [, <time>]*   en"]
    - ["animation-fill-mode", "The animation-fill-mode CSS property specifies how a CSS animation should apply styles to its target before and after it is executing. animation-fill-mode: none | forwards | backwards | both [, none | forwards | backwards | both]*   en"]
    - ["animation-iteration-count", "The animation-iteration-count CSS property defines the number of times an animation cycle should be played before stopping. animation-iteration-count: infinite | <number> [, infinite | <number>]*   en"]
    - ["animation-name", "The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes at-rule that defines the property values for the animation sequence. animation-name: none | <name> [, none | <name>]*   en"]
    - ["animation-play-state", "The animation-play-state CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation. animation-play-state: running | paused [, running | paused]*   en"]
    - ["animation-timing-function", "The animation-timing-function CSS property specifies how a CSS animation should progress over the duration of each cycle. The possible values are one or several <timing-function> . animation-timing-function: <timing-function> [, <timing-function>]*   en"]
    - [attr, "The attr() function is used to retrieve the value of an HTML element's attribute and use it in the style sheet. attr( attribute-name ) attr( attribute-name, [ <type> ], [ <value> ] )   en"]
    - [auto, Signifies a value that is to be automatically computed by a user agent. The specific effects of auto depend on the property to which it is applied as its value.    en]
    - ["backface-visibility", "The backface-visibility CSS property determines whether or not the back face of the element is visible when facing the user. The back face of an element always is a transparent background, letting, when visible, a mirror image of the front face be displayed. backface-visibility: visibility   en"]
    - [background, "The background CSS property is a shorthand for setting the individual background values in a single place in the style sheet. background can be used to set the values for one or more of: background-color , background-image , background-position , background-repeat , background-size , and background-attachment . background: [<bg-layer>, ]* <final-bg-layer>   en"]
    - ["background-attachment", "If a background-image is specified, the background-attachment CSS property determines whether that image's position is fixed within the viewport, or scrolls along with its containing block. background-attachment: attachment[, attachment]*   en"]
    - ["background-clip", "The background-clip CSS property specifies whether an element's background, either the color or image, extends underneath its border. background-clip: [ border-box | padding-box | content-box][, [ border-box | padding-box | content-box]]*   en"]
    - ["background-color", "The background-color CSS property sets the background color of an element, either through a color value or the keyword transparent. background-color: color | inherit .exampleOne { background-color: teal; color: white; } .exampleTwo { background-color: rgb(153,102,153); color: rgb(255,255,204); } .exampleThree { background-color: #666699; color: #FFFFFF; }   en"]
    - ["background-image", "The background-image CSS property sets the background images for an element. The images are drawn on successive stacking context layers, with the first specified being drawn as if it is the closest to the user. The borders of the element are then drawn on top of them, and the background-color is drawn beneath them. background-image: background-image[, background-image]*   en"]
    - ["background-origin", "The background-origin CSS property determines the background positioning area, that is the position of the origin of an image specified using the background-image CSS property. background-origin: [padding-box | border-box | content-box][, [border-box | padding-box | content-box]]*   en"]
    - ["background-position", "The background-position CSS property sets the initial position, relative to the background position layer defined by background-origin for each defined background image. background-position: <bg-position>[, <bg-position>]* background-position: [ <percentage> | <length> | left | center | right ] [ <percentage> | <length> | top | center | bottom ]? background-position: [ top | center | bottom ] background-position: inherit   en"]
    - ["background-repeat", "The background-repeat CSS property defines how background images are repeated. A background image can be repeated along the horizontal axis, the vertical axis, both, or not repeated at all. When the repetition of the image tiles doesn't let them exactly cover the background, the way adjustments are done can be controlled by the author: by default, the last image is clipped, but the different tiles can instead be re-sized, or space can be inserted between the tiles. background-repeat: repeat-style[, repeat-style]* .exampleone { background-image: url(\"logo.png\"); background-repeat: repeat-x; } .exampletwo { background-image: url(\"logo.png\"); background-repeat: no-repeat; } .examplethree { background-image: url(\"img1.png\"), url(\"img2.png\"); background-repeat: repeat-x, repeat-y; }   en"]
    - ["background-size", "The background-size CSS property specifies the size of the background images. background-size: background-size[, background-size]*   en"]
    - ["::before", ":before creates a pseudo-element that is the first child of the element matched. Often used to add cosmetic content to an element, by using the content property. This element is inline by default. element:before { style properties } /* CSS2 syntax */ element::before { style properties } /* CSS3 syntax */   en"]
    - [border, "The border CSS property is a shorthand property for setting the individual border property values in a single place in the style sheet. border can be used to set the values for one or more of: border-width , border-style , border-color . border: [ <border-width> || <border-style> || <border-color> ] | inherit element { border: dashed } /* dashed border of medium thickness, the same color as the text */ element { border: dotted 1.5em } /* dotted, 1.5em thick border, the same color as the text */ element { border: solid red } /* solid, red border of medium thickness */ element { border: solid blue 10px } /* solid, blue border of 10px thickness */   en"]
    - ["border-bottom", "The border-bottom CSS property is a shorthand that sets the values of border-bottom-color , border-bottom-style , and border-bottom-width . These properties describe the bottom border of elements. border-bottom: [ <border-width> || <border-style> || <border-color> ] | inherit   en"]
    - ["border-bottom-color", "The border-bottom-color CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties border-color or border-bottom are more convenient and preferable. border-bottom-color: color or border-bottom-color: inherit   en"]
    - ["border-bottom-right-radius", "The border-bottom-right-radius CSS property sets the rounding of the bottom-right corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square. Formal grammar: [ <length> | <percentage> ] [ <length> | <percentage> ]? border-bottom-right-radius: radius /* the corner is a circle */ E.g. border-bottom-right-radius: 3px border-bottom-right-radius: horizontal vertical /* the corner is an ellipsis */ E.g. border-bottom-right-radius: 0.5em 1em border-bottom-right-radius: inherit   en"]
    - ["border-bottom-left-radius", "The border-bottom-left-radius CSS property sets the rounding of the bottom-left corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square. Formal grammar: [ <length> | <percentage> ] [ <length> | <percentage> ]? border-bottom-left-radius: radius /* the corner is a circle */ E.g. border-bottom-left-radius: 3px border-bottom-left-radius: horizontal vertical /* the corner is an ellipsis */ E.g. border-bottom-left-radius: 0.5em 1em border-bottom-left-radius: inherit   en"]
    - ["border-bottom-style", "The border-bottom-style CSS property sets the line style of the bottom border of a box. border-bottom-style: border-style or border-bottom-style: inherit   en"]
    - ["border-bottom-width", "The border-bottom-width CSS property sets the width of the bottom border of a box. border-bottom-width: border-width or border-bottom-width: inherit   en"]
    - ["border-collapse", "The border-collapse CSS property selects a table's border model. This has a big influence on the look and style of the table cells. border-collapse: collapse | separate | inherit   en"]
    - ["border-color", "The border-color CSS property is a shorthand for setting the color of the four sides of an element's border: border-top-color , border-right-color , border-bottom-color , border-left-color border-color: color /* one-value syntax */ border-color: horizontal vertical /* two-value syntax */ border-color: top vertical bottom /* three-value syntax */ border-color: top right bottom left /* four-value syntax */ border-color: inherit   en"]
    - ["border-image", "The border-image CSS property allows drawing an image on the borders of elements. This makes drawing complex looking widgets much simpler than it has been and removes the need for nine boxes in some cases. none | <image> || [[<number> | <percentage> ]{1,4} && fill?] [[/ [<length> | <percentage> | <number> | auto ]{1,4} ]? [/ [<length> | <number> ]{1,4}]?] || [ stretch | repeat | round | space ]{1,2} none | <'border-image-source’> || <'border-image-slice’> [ / <'border-image-width’>? [ / <'border-image-outset’> ]? ]? || <'border-image-repeat’>   en"]
    - ["border-image-outset", "The border-image-outset property describes, by which amount border image area extends beyond the border box.    en"]
    - ["border-image-repeat", "The border-image-repeat CSS property defines how the middle part of a border image is handled to match the size of the border. It has a one-value syntax which describes the behavior for all sides, and a two-value syntax that sets a different value for the horizontal and vertical behavior. Formal grammar: [ stretch | repeat | round | space ]{1,2} border-image-repeat: type /* One-value syntax */ E.g. border-image-value: stretch; border-image-repeat: horizontal vertical /* Two-value syntax */ E.g. border-image-width: round space; border-image-repeat: inherit   en"]
    - ["border-image-slice", en]
    - ["border-image-source", "The border-image-source CSS property defines the <image> to use instead of the style of the border. If this property is set to none, the style defined by border-style is used instead. Formal grammar: none | <image> border-image-source: none /* no border-image, use the specified border-style */ border-image-source: url(image.jpg) /* the image.jpg is used as image */ border-image-source: linear-gradient(to top, red, yellow) /* a gradient is used as image */ border-image-source: inherit   en"]
    - ["border-image-width", "The border-image-width CSS property defines the offset to use for dividing the border image in nine parts, the top-left corner, central top edge, top-right-corner, central right edge, bottom-right corner, central bottom edge, bottom-left corner, and central right edge. They represent inward distance from the top, right, bottom and right edges. Formal grammar: [ <length> | <percentage> | <number> | auto ]{1,4} border-image-width: width /* One-value syntax */ E.g. border-image-width: 3; border-image-width: horizontal vertical /* Two-value syntax */ E.g. border-image-width: 2em 3em; border-image-width: top vertical bottom /* Three-value syntax */ E.g. border-image-width: 5% 15% 10%; border-image-width: top right bottom left /* Four-value syntax */ E.g. border-image-width: 5% 2em 10% auto; border-image-width: inherit   en"]
    - ["border-left", "The border-left CSS property is a shorthand that sets the values of border-left-color , border-left-style , and border-left-width . These properties describe the left border of elements. border-left: [ <border-width> || <border-style> || <border-color> ] | inherit   en"]
    - ["border-left-color", "The border-left-color CSS property sets the color of the bottom border of an element. Note that in many cases the shorthand CSS properties border-color or border-left are more convenient and preferable. border-left-color: color or border-left-color: inherit   en"]
    - ["border-left-style", "The border-left-style CSS property sets the line style of the left border of a box. border-left-style: border-style or border-left-style: inherit   en"]
    - ["border-left-width", "The border-left-width CSS property sets the width of the left border of a box. border-left-width: border-width or border-left-width: inherit   en"]
    - ["border-radius", "The border-radius CSS property allows Web authors to define how rounded border corners are. The curve of each corner is defined using one or two radii, defining its shape: circle or ellipse. Formal grammar: [ <length> | <percentage> ]{1,4} [ / [ <length> | <percentage> ]{1,4}] ? \\------------------------------/ \\-------------------------------/ First radii Second radii (optional) The syntax of the first radius allows one to four values: border-radius: radius border-radius: top-left-and-bottom-right top-right-and-bottom-left border-radius: top-left top-right-and-bottom-left bottom-right border-radius: top-left top-right bottom-right bottom-left The syntax of the second radius also allows one to four values border-radius: (first radius values) / radius border-radius: (first radius values) / top-left-and-bottom-right top-right-and-bottom-left border-radius: (first radius values) / top-left top-right-and-bottom-left bottom-right border-radius: (first radius values) / top-left top-right bottom-right bottom-left border-radius: inherit border-radius: 1em/5em; /* is equivalent to */ border-top-left-radius: 1em 5em; border-top-right-radius: 1em 5em; border-bottom-right-radius: 1em 5em; border-bottom-left-radius: 1em 5em;border-radius: 4px 3px 6px / 2px 4px; /* is equivalent to: */ border-top-left-radius: 4px 2px; border-top-right-radius: 3px 4px; border-bottom-right-radius: 6px 2px; border-bottom-left-radius: 3px 4px;   en"]
    - ["border-right", "The border-right CSS property is a shorthand that sets the values of border-right-color , border-right-style , and border-right-width . These properties describe the right border of elements. border-right: [ <border-width> || <border-style> || <border-color> ] | inherit   en"]
    - ["border-right-color", "The border-right-color CSS property sets the color of the right border of an element. Note that in many cases the shorthand CSS properties border-color or border-right are more convenient and preferable. border-right-color: color or border-right-color: inherit   en"]
    - ["border-right-style", "The border-right-style CSS property sets the line style of the right border of a box. border-right-style: border-style or border-right-style: inherit   en"]
    - ["border-right-width", "The border-right-width CSS property sets the width of the right border of a box. border-right-width: border-width or border-right-width: inherit   en"]
    - ["border-spacing", "The border-spacing CSS property specifies the distance between the borders of adjacent cells (only for the separated borders model). This is equivalent to the cellspacing attribute in presentational HTML, but an optional second value can be used to set different horizontal and vertical spacing. border-spacing: length /* one-value syntax */ border-spacing: horizontal vertical /* two-value syntax */ border-spacing: inherit   en"]
    - ["border-style", "The border-style CSS property is a shorthand property for setting the line style for all four sides of the elements border. Formal grammar: <border-style>{1,4} where <border-style> is none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset border-style: style /* One-value syntax */ E.g. border-style: dashed; border-style: horizontal vertical /* Two-value syntax */ E.g. border-style: dotted solid; border-style: top vertical bottom /* Three-value syntax */ E.g. border-style: hidden double dashed; border-style: top right bottom left /* Four-value syntax */ E.g. border-style: none solid dotted dashed; border-style: inherit element { border-width: 1px; border-style: solid; border-color: black; }   en"]
    - ["border-top", "The border-top CSS property is a shorthand that sets the values of border-top-color , border-top-style , and border-top-width . These properties describe the top border of elements. border-top: [ <border-width> || <border-style> || <border-color> ] | inherit   en"]
    - ["border-top-color", "The border-top-color CSS property sets the color of the top border of an element. Note that in many cases the shorthand CSS properties border-color or border-top are more convenient and preferable. border-top-color: color or border-top-color: inherit   en"]
    - ["border-top-left-radius", "The border-top-left-radius CSS property sets the rounding of the top-left corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square. Formal grammar: [ <length> | <percentage> ] [ <length> | <percentage> ]? border-top-left-radius: radius /* the corner is a circle */ E.g. border-top-left-radius: 3px border-top-left-radius: horizontal vertical /* the corner is an ellipsis */ E.g. border-top-left-radius: 0.5em 1em border-top-left-radius: inherit   en"]
    - ["border-top-right-radius", "The border-top-right-radius CSS property sets the rounding of the top-right corner of the element. The rounding can be a circle or an ellipse, or if one of the value is 0 no rounding is done and the corner is square. Formal grammar: [ <length> | <percentage> ] [ <length> | <percentage> ]? border-top-right-radius: radius /* the corner is a circle */ E.g. border-top-right-radius: 3px border-top-right-radius: horizontal vertical /* the corner is an ellipsis */ E.g. border-top-right-radius: 0.5em 1em border-top-right-radius: inherit   en"]
    - ["border-top-style", "The border-top-style CSS property sets the line style of the top border of a box. border-top-style: border-style or border-top-style: inherit   en"]
    - ["border-top-width", "The border-top-width CSS property sets the width of the top border of a box. border-top-width: border-width or border-top-width: inherit   en"]
    - ["border-width", "The border-width CSS property sets the width of the border of a box. Using the shorthand property border is often more convenient. border-width: width /* One-value syntax */ border-width: horizontal vertical /* Two-value syntax */ border-width: top vertical bottom /* Three-value syntax */ border-width: top right bottom left /* Four-value syntax */ border-width: inherit   en"]
    - [bottom, "The bottom CSS property participates in specifying the position of positioned elements. bottom: length or bottom: percentage or bottom: auto or bottom: inherit   en"]
    - ["box-align", "The CSS box-align property specifies how an element aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box. See Flexbox for more about the properties of flexbox elements. box-align: start | center | end | baseline | stretch /* As specified */ -moz-box-align: start | center | end | baseline | stretch /* Mozilla */ -webkit-box-align: start | center | end | baseline | stretch /* WebKit */   en"]
    - ["box-direction", "The CSS box-direction property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge). See Flexbox for more about the properties of flexbox elements. box-direction: normal | reverse | inherit /* As specified */ -moz-box-direction: normal | reverse | inherit /* Mozilla */ -webkit-box-direction: normal | reverse | inherit /* WebKit */   en"]
    - ["box-flex", "The CSS -moz-box-flex and -webkit-box-flex properties specify how a -moz-box or -webkit-box grows to fill the box that contains it, in the direction of the containing box's layout. See Flexbox for more about the properties of flexbox elements. -moz-box-flex: number /* Mozilla */ -webkit-box-flex: number /* WebKit */   en"]
    - ["box-flex-group", "The CSS box-flex-group property assigns the flexbox's child elements to a flex group. See Flexbox for more about the properties of flexbox elements. box-flex-group: <number> /* As specified */ -moz-box-flex-group: <number> /* Mozilla */ -webkit-flex-group: <number> /* WebKit */   en"]
    - ["box-lines", "The CSS box-lines property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes). See Flexbox for more about the properties of flexbox elements. box-lines: single | multiple /* As specified */ -moz-box-lines: single | multiple /* Mozilla */ -webkit-lines: single | multiple /* WebKit */   en"]
    - ["box-ordinal-group", "The CSS box-ordinal-group property assigns the flexbox's child elements to an ordinal group. See Flexbox for more about the properties of flexbox elements. box-ordinal-goup: <number> /* As specified */ -moz-box-ordinal-group: <number> /* Mozilla */ -webkit-ordinal-group: <number> /* WebKit */   en"]
    - ["box-orient", "The CSS box-orient property specifies whether an element lays out its contents horizontally or vertically. See Flexbox for more about the properties of flexbox elements. box-orient: horizontal | vertical | inline-axis | block-axis | inherit /* As specified */ -moz-box-orient: horizontal | vertical | inline-axis | block-axis | inherit /* Mozilla */ -webkit-box-orient: horizontal | vertical | inline-axis | block-axis | inherit /* WebKit */   en"]
    - ["box-pack", "The CSS -moz-box-pack and -webkit-box-pack properties specify how a -moz-box or -webkit-box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box. See Flexbox for more about the properties of flexbox elements. -moz-box-pack: start | center | end | justify /* Mozilla */ -webkit-box-pack: start | center | end | justify /* WebKit */   en"]
    - ["box-shadow", "The box-shadow CSS property accepts one or more shadow effects as a comma-separated list. It allows casting a drop shadow from the frame of almost any element. If a border-radius is specified on the element with a box shadow, the box shadow takes on the same rounded corners. The z-ordering of multiple box shadows is the same as multiple text shadows (the first specified shadow is on top). box-shadow: none | <shadow> [,<shadow>]* where <shadow> is defined as: inset? && [ <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? ]   en"]
    - ["box-sizing", "The box-sizing CSS property is used to alter the default CSS box model used to calculate widths and heights of elements. It is possible to use this property to emulate the behavior of browsers that do not correctly support the CSS box model specification. box-sizing: content-box | padding-box | border-box   en"]
    - [calc, "The calc() CSS function can be used anywhere a <length> is required. With calc(), you can perform calculations to determine the size and shape of objects. -vendor-calc(expression)   en"]
    - ["caption-side", "The caption-side CSS property positions the content of a table's <caption> on the specified side. caption-side: side or caption-side: inherit   en"]
    - ["@charset", "The @charset CSS at-rule specifies the character encoding used in the style sheet. It must be the first element in the style sheet and not be preceded by any character; as it is not a nested statement, it cannot be used inside conditional group at-rules. If several @charset at-rules are defined, only the first one is used, and it cannot be used inside a style attribute on an HTML element or inside the <style> element where the character set of the HTML page is relevant. @charset charset;   en"]
    - [":checked", "The :checked pseudo-class selector represents any radio (<input type=\"radio\">), checkbox (<input type=\"checkbox\">) or option (<option> in a <select> ) element that is checked or toggled to an on state. The user can change this state by clicking on the element, or selecting a different value, in which case the :checked pseudo-class no longer applies to this element, but will to the relevant one. element:checked { style properties }   en"]
    - [clear, "The clear CSS property specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them. clear: none | left | right | both | inherit h1 { clear: none } h2 { clear: right }   en"]
    - [clip, "The clip CSS property defines what portion of an element is visible. The clip property applies only to elements with position:absolute . clip: <shape> or clip: auto or clip: inherit rect(<top>, <right>, <bottom>, <left>) /* standard syntax */ rect(<top> <right> <bottom> <left>) /* backwards compatible syntax */ p { border:dotted; position:relative; } #img2 { position:absolute; left:263px; clip: rect(40px, 200px, 150px, 30px); /* standard syntax, unsupported by Internet Explorer 4-7 */ } #img3 { position:absolute; left:526px; clip: rect(40px 200px 150px 30px); /* non-standard syntax, but supported by all major browsers including Firefox and IE */ }   en"]
    - ["clip-path", "clip-path: <uri> | none | inherit   en"]
    - [color, "The color CSS property sets the foreground color of an element's text content color: color or E.g. color : red; color: inherit element { color: red } element { color: #f00 } element { color: #ff0000 } element { color: rgb(255,0,0) } element { color: rgb(100%, 0%, 0%) } element { color: hsl(0, 100%, 50%) } /* 50% translucent */ element { color: rgba(255, 0, 0, 0.5) } element { color: hsla(0, 100%, 50%, 0.5) }   en"]
    - [color_value, "The <color> CSS data type denotes a color in the sRGB color space. A color can be described using a keyword, using the RGB cubic-coordinate system (via the #-hexadecimal or the rgb() and rgba() functional notations) or using the HSL cylindrical-coordinate system (via the hsl() and hsla() functional notations).    en"]
    - [columns, "The columns CSS property is a shorthand property allowing to set both the column-width and the column-count properties at the same time. columns: <column-count> || <column-width>   en"]
    - ["column-count", "The column-count CSS property describes the number of columns of the element. column-count: integer or column-count: auto   en"]
    - ["column-fill", "The column-fill CSS property controls how contents are partitioned into columns. Contents are either balanced, which means that contents in all columns will have the same height or, when using auto, just take up the room the content needs. column-fill: auto or column-fill: balance   en"]
    - ["column-gap", "The column-gap CSS property sets the size of the gap between columns for elements which are specified to display as a multi-column element. column-gap: length or column-gap: normal   en"]
    - ["column-rule", "In multi-column layouts, the column-rule CSS property specifies a straight line, or \"rule\", to be drawn between each column. It is a convenient shorthand to avoid setting each of the individual column-rule-* properties separately : column-rule-width , column-rule-style and column-rule-color . column-rule: <border-width> || <border-style> || <color>   en"]
    - ["column-rule-color", "The column-rule-color CSS property lets you set the color of the rule drawn between columns in multi-column layouts. column-rule-color: <color>   en"]
    - ["column-rule-style", "The column-rule-style CSS property lets you set the style of the rule drawn between columns in multi-column layouts. column-rule-style: <border-style>   en"]
    - ["column-rule-width", "The column-rule-width CSS property lets you set the width of the rule drawn between columns in multi-column layouts. column-rule-width: <border-width>   en"]
    - ["column-span", "The column-span CSS property makes it possible for an element to span across all columns when its value is set to all. An element that spans more than one column is called a spanning element. column-span: none or column-span: all   en"]
    - ["column-width", "The column-width CSS property suggests an optimal column width. This is not a absolute value but a mere hint. Browser will adjust the width of the column around that suggested value, allowing to achieve scalable designs that fit different screen size. Especially in presence of the column-count CSS property which has precedence, to set an exact column width, all length values must be specified. In horizontal text these are width , column-width , column-gap , and column-rule-width . column-width: length or column-width: auto   en"]
    - [content, "The content CSS property is used with the :before and :after pseudo-elements to generate content in an element. content: normal | none | [ <string> | <uri> | <counter> | attr() | open-quote | close-quote | no-open-quote | no-close-quote ]+ | inherit q:lang(en) { quotes: '\"' '\"' \"'\" \"'\" } q:before { content: open-quote } q:after { content: close-quote } h1:before { content: \"Chapter: \"; } /* content accepts multiple values */ a:before { content: url(http://www.mozilla.org/favicon.ico) \" MOZILLA: \"; font: x-small Arial,freeSans,sans-serif; color: gray; }   en"]
    - [counter, "To use a CSS counter, it must first be reset to a value, 0 by default. To add the value of a counter to an element, use the counter() function. The following example adds to the beginning of each h1 element \"Section <the value of the counter>:\". ol { counter-reset: section; /* Creates a new instance of the section counter with each ol element */ list-style-type: none; } li:before { counter-increment: section; /* Increments only this instance of the section counter */ content: counters(section, \".\") \" \"; /* Adds the value of all instances of the section counter separated by a \".\". */ }<ol> <li>item</li> <!-- 1 --> <li>item <!-- 2 --> <ol> <li>item</li> <!-- 2.1 --> <li>item</li> <!-- 2.2 --> <li>item <!-- 2.3 --> <ol> <li>item</li> <!-- 2.3.1 --> <li>item</li> <!-- 2.3.2 --> </ol> <ol> <li>item</li> <!-- 2.3.1 --> <li>item</li> <!-- 2.3.2 --> <li>item</li> <!-- 2.3.3 --> </ol> </li> <li>item</li> <!-- 2.4 --> </ol> </li> <li>item</li> <!-- 3 --> <li>item</li> <!-- 4 --> </ol> <ol> <li>item</li> <!-- 1 --> <li>item</li> <!-- 2 --> </ol>   en"]
    - ["counter-increment", "The counter-increment CSS property is used to increase the value of CSS Counters by a given value. The counter's value can be reset using the counter-reset CSS property. counter-increment: [<identifier> <integer>?]+ | inherit | none h1 { counter-increment: chapter section 2 page; /* Increases the value of the chapter and page counters by 1 and the section counter by 2. */ }   en"]
    - ["counter-reset", "The counter-reset CSS property is used to reset CSS Counters to a given value. counter-reset: [<identifier> <integer>?]+ | inherit | none h1 { counter-reset: chapter section 1 page; /* Sets the chapter and page counters to 0 and the section counter to 1. */ }   en"]
    - ["timing-function", "The <timing-function> CSS data type denotes a mathematical function that describes how fast one-dimensional values change during transitions or animations. This in essence lets you establish an acceleration curve, so that the speed of the animation can vary over its duration. cubic-bezier(x1, y1, x2, y2) cubic-bezier(0.1, 0.7, 1.0, 0.1) The canonical Bézier curve with four <number> in the [0,1] range. cubic-bezier(0, 0, 1, 1) Using <integer> is valid as any <integer> is also a <number>. cubic-bezier(-0.2, 0.6, -0.1, 0) Negative values for abscissas are valid, leading to bouncing effects. cubic-bezier(1.1, 0, 4, 0) Values > 1.0 for abscissas are also valid. cubic-bezier(0.1, red, 1.0, green) Though the animated output type may be a color, Bézier curves work w/ numerical ratios. cubic-bezier(0.1, 4, 0.6, 2.45) Ordinates must be in the [0, 1] range or the curve is not a function of time. cubic-bezier(0.3, 2.1) The two points must be defined, there is no default value. cubic-bezier(0.3, -1.9, 2.1, -0.2) Ordinates must be in the [0, 1] range or the curve is not a function of time. steps(number_of_steps, direction) steps(5, end) There is 5 treads, the last one happens right before the end of the animation. steps(2, start) A two-step staircase, the first one happening at the start of the animation. steps(2.0, end) The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start) The amount of steps must be non-negative. steps(0, end) There must be at least one step. steps(2) The second parameter is not optional. steps(start, 3) Though of different types, the order of parameter is important. step(1, end) Even if there is one step, the function name is steps, with the plural 's' steps(3 end) The two parameters must be separated with a comma; one or several spaces is not enough.   en"]
    - [cursor, "The cursor CSS property specifies the mouse cursor displayed when the mouse pointer is over an element. CSS 2.1 cursor: [ [ <uri> ,]* [ auto | crosshair | default | help | move | pointer | progress | text | wait | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize ] ] ] | inherit CSS 3 cursor: [ [ <uri> [<x> <y>]?,]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll ] ] | inherit   en"]
    - [":default", "The :default pseudo-class represents any user interface element that is the default among a group of similar elements. :default { style properties }   en"]
    - [direction, "The direction CSS property should be set to match the direction of the text: rtl for Hebrew or Arabic text and ltr for other scripts. This should normally be done as part of the document (e.g., using the dir attribute in HTML) rather than through direct use of CSS. direction: [ ltr | rtl | inherit ] ; blockquote { direction : rtl ; }   en"]
    - [":disabled", "The :disabled pseudo-class represents any disabled element. An element is disabled if it can't be activated (e.g. selected, clicked on or accept text input) or accept focus. The element also has an enabled state, in which it can be activated or accept focus. .input[type=\"text\"]:disabled { background: #ccc; }<form action=\"#\"> <fieldset> <legend>Shipping address</legend> <input type=\"text\" name=\"shipping_firstName\" disabled> <input type=\"text\" name=\"shipping_lastName\" disabled> <input type=\"text\" name=\"shipping_address1\" disabled> <input type=\"text\" name=\"shipping_address2\" disabled> <input type=\"text\" name=\"shipping_zipCode\" disabled> <input type=\"text\" name=\"shipping_town\" disabled> </fieldset> <fieldset> <legend>Billing address</legend> <label> <input type=\"checkbox\" name=\"billing_is_shipping\" value=\"true\" checked> Billing address is the same as shipping address </label> <input type=\"text\" name=\"billing_firstName\" disabled> <input type=\"text\" name=\"billing_lastName\" disabled> <input type=\"text\" name=\"billing_address1\" disabled> <input type=\"text\" name=\"billing_address2\" disabled> <input type=\"text\" name=\"billing_zipCode\" disabled> <input type=\"text\" name=\"billing_town\" disabled> </fieldset> </form>   en"]
    - [display, "The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is inline. display: display-value or E.g. display: inline; display: inherit p.secret { display: none } <p style=\"display:none\"> invisible text </p>   en"]
    - ["@document", "The @-moz-document rule is a Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document. It is designed primarily for user style sheets. A @-moz-document rule can specify one or more matching functions. If any of the functions apply to a URL, the rule will take effect on that URL.    en"]
    - [element, "The element() CSS function defines an <image> value generated from an arbitrary HTML element. This image is live, meaning that if the HTML element is changed, the CSS properties using the resulting value are automatically updated. element( id )   en"]
    - [":empty", "The :empty pseudo-class represents any element that has no children at all. Only element nodes and text (including whitespace) are considered. Comments or processing instructions do not affect whether an element is considered empty or not. <element>:empty { style properties }   en"]
    - ["empty-cells", "The empty-cells CSS property specifies how user agent should render borders and backgrounds around cells that have no visible content. empty-cells: show | hide | inherit .contentbox td { empty-cells: show; }   en"]
    - [":enabled", "The :enabled pseudo-class represents any enabled element. An element is enabled if it can be activated (e.g. selected, clicked on or accept text input) or accept focus. The element also has an disabled state, in which it can't be activated or accept focus. input:enabled { color: #7BFF89; } input:disabled { color: #D9D9D9; }   en"]
    - [filter, "The CSS filter property provides for effects like blurring or color shifting on an element’s rendering before the element is displayed. Filters are commonly used to adjust the rendering of an image, a background, or a border. filter: <filter-function> [<filter-function>]* | none filter: url(svg-url#element-id)   en"]
    - [":first", "The :first page pseudo-class describes the styling of the first page when printing a document. @page :first { margin: 2in 3in; }   en"]
    - [":first-child", "The :first-child CSS pseudo-class represents any element that is the first child element of its parent. element:first-child { style properties }   en"]
    - ["::first-letter", "The ::first-letter CSS pseudo-element selects the first letter of the first line of a block, if it is not preceded by any other content (such as images or inline tables) on its line. /* make the first letter of every paragraph red and big */ p:first-letter { color: red; font-size: 130%; }   en"]
    - ["::first-line", "The ::first-line CSS pseudo-element applies styles only to the first line of a element. The amount of the text on the first line depends of numerous factors, like the width of the elements or of the document, but also of the font size of the text. As all pseudo-elements, the selectors containing ::first-line does not match any real HTML element.    en"]
    - [":first-of-type", "The :first-of-type pseudo-class represents the first sibling of the given type in the list of children of its parent element. element:first-of-type { style properties }   en"]
    - [flex, "The flex CSS property specifies ability of a flex item to alter their dimensions to fill the available space. Flex items can be stretched to use available space proportional to their flex grow ratio or their flex shrink ratio to prevent overflow. Formal grammar: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] flex: none /* value 'none' case */ flex: <'flex-grow'> /* One value syntax, variation 1 */ flex: <'flex-basis'> /* One value syntax, variation 2 */ flex: <'flex-grow'> <'flex-basis'> /* Two values syntax, variation 1 */ flex: <'flex-grow'> <'flex-shrink'> /* Two values syntax, variation 2 */ flex: <'flex-grow'> <'flex-shrink'> <'flex-basis'> /* Three values syntax */   en"]
    - [Flexbox, "The \"flex-\" implementation is the most current implementation of flexbox. To designate the CSS for elements using this style, set the display property as follows:    en"]
    - ["flex-basis", "The flex-basis CSS property specifies the flex basis which is the initial main size of a flex item. Formal grammar: <'width'> flex-basis: value   en"]
    - ["flex-direction", "The flex-direction CSS property specifies how flex items are placed in the flex container defining the main-axis and the direction (normal or reversed). Formal grammar: <flex-direction> where <flex-direction> is row | row-reverse | column | column-reverse flex-direction: row | row-reverse | column | column-reverse   en"]
    - ["flex-flow", "The flex-flow CSS property is a shorthand property for flex-direction and flex-wrap individual properties. Formal grammar: <'flex-direction'> || <'flex-wrap'> where <'flex-direction'> and <'flex-wrap'> values are those of the corresponding individual properties flex-flow: row | row-reverse | column | column-reverse || nowrap | wrap | wrap-reverse   en"]
    - ["flex-grow", "The flex-grow CSS property specifies the flex grow ratio of a flex item. Formal grammar: <number> flex-grow: value   en"]
    - ["flex-shrink", "The flex-shrink CSS property specifies the flex shrink ratio of a flex item. Formal grammar: <number> flex-shrink: value   en"]
    - ["flex-wrap", "The flex-wrap CSS property specifies whether the children are forced into a single line or if the items can be flowed on multiple lines. Formal grammar: <flex-wrap> where <flex-wrap> is nowrap | wrap | wrap-reverse flex-wrap: nowrap | wrap | wrap-reverse   en"]
    - [float, "The float CSS property specifies that an element should be taken from the normal flow and placed along the left or right side of its container, where text and inline elements will wrap around it. float: left | right | none | inherit <style type=\"text/css\"> div { border: solid red; max-width: 70ex; } h4 { float: left; margin: 0; } </style> <div> <h4>HELLO!</h4> This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. This is some text. </div> h2.secondHeading { clear: both; } p.withRedBoxes { overflow: hidden; height: auto; }   en"]
    - [":focus", "The :focus pseudo-class is applied when a element has received focus, either from the user selecting it with the use of a keyboard or by activating with the mouse (e.g. a form input). <element>:focus { ... }   en"]
    - [font, "The font CSS property is either a shorthand property for setting font-style , font-variant , font-weight , font-size , line-height and font-family , or a way to set the element's font to a system font, using specific keywords. font: font-style || font-variant || font-weight ]? font-size [ / line-height ]? font-family font: system_font   en"]
    - ["@font-face", "The @font-face CSS at-rule allows authors to specify online fonts to display text on their web pages. By allowing authors to provide their own fonts, @font-face eliminates the need to depend on the limited number of fonts users have installed on their computers. The @font-face at-rule may be used not only at the top level of a CSS, but also inside any CSS conditional-group at-rule. @font-face { font-family: <a-remote-font-name>; src: <source> [,<source>]*; [font-weight: <weight>]; [font-style: <style>]; }   en"]
    - ["font-family", "The font-family CSS property allows for a prioritized list of font family names and/or generic family names to be specified for the selected element. Unlike most other CSS properties, values are separated by a comma to indicate that they are alternatives. The browser will select the first font on the list that is installed on the computer, or that can be downloaded using the information provided by a @font-face at-rule. font-family: family-or-generic-name [, family-or-generic-name]* | inherit font-family: Gill Sans Extrabold, sans-serif; font-family: \"Goudy Bookletter 1911\", sans-serif;font-family: Goudy Bookletter 1911, sans-serif; font-family: Red/Black, sans-serif; font-family: \"Lucida\" Grande, sans-serif; font-family: Ahem!, sans-serif; font-family: test@foo, sans-serif; font-family: #POUND, sans-serif; font-family: Hawaii 5-0, sans-serif;   en"]
    - ["font-feature-settings", "The font-feature-settings CSS property allows control over advanced typographic features in OpenType fonts. font-feature-settings : normal | <feature-tag-value> [, <feature-tag-value>]*   en"]
    - ["font-size", "The font-size CSS property specifies the size of the font. The font size may, in turn, change the size of other items, since it is used to compute the value of em and ex length units. font-size: xx-small | x-small | small | medium | large | x-large | xx-large font-size: smaller | larger font-size: <length> | <percentage> | inherit   en"]
    - ["font-size-adjust", "The font-size-adjust CSS property specifies that font size should be chosen based on the height of lowercase letters rather than the height of capital letters. font-size-adjust: <number> | none | inherit   en"]
    - ["font-stretch", "The font-stretch CSS property selects a normal, condensed, or extended face from a font family. font-stretch: inherit | ultra-condensed | extra-condensed | condensed | semi-condensed | normal | semi-expanded | expanded | extra-expanded | ultra-expanded h1 { font-stretch: extra-expanded } p { font-stretch: condensed }   en"]
    - ["font-style", "The font-style CSS property allows italic or oblique faces to be selected within a font-family . font-style: normal | italic | oblique | inherit   en"]
    - ["font-variant", "The font-variant CSS property selects a normal, or small-caps face from a font family. Setting font-variant is also possible by using the font shorthand. font-variant: normal | small-caps | inherit   en"]
    - ["font-weight", "The font-weight CSS property specifies the weight or boldness of the font. However, some fonts are not available in all weights; some are available only on normal and bold.    en"]
    - [frequency, "The <frequency> CSS data types denotes a frequency dimension, like the pitch of a speaking voice. They consists of a <number> immediately followed by the unit. Like for any CSS dimension, there is no space between the unit literal and the number. 12Hz Positive integer. -456kHz Negative integer. 4.3Hz Non-integer. 14KhZ The unit is case-insensitive, though non-SI capitalization is not recommended. +0s Zero, with a leading + and the unit. -0ms Zero, with a leading - and the unit (Though strange, this is an allowed value). 12.0 This is a <number>, not an <frequency>, it must have a unit. 7 Hz No space is allowed between the <number> and the unit. 0 Zero values can be written without a unit only if there are <length> values, not <frequency>.   en"]
    - [gradient, "The <gradient> CSS data type denotes a CSS <image> made of a progressive transition between two or more colors. A CSS gradient is not a CSS <color> but an image with no intrinsic dimensions; that is, it has no natural or preferred size, nor ratio. Its concrete size will match the one of the element it applies to.    en"]
    - [height, "The height CSS property specifies the height of the content area of an element. The content area is inside the padding, border, and margin of the element. height: <length> | <percentage> | auto | inherit   en"]
    - [":hover", "The :hover CSS pseudo-class matches when the user designates an element with a pointing device, but does not necessarily activate it. This style may be overridden by any other link-related pseudo-classes, that is :link , :visited , and :active , appearing in subsequent rules. In order to style appropriately links, you need to put the :hover rule after the :link and :visited rules but before the :active one, as defined by the LVHA-order: :link — :visited — :hover — :active. :link:hover { outline: dotted red; } .foo:hover { background: gold; }div.menu-bar ul ul { display: none; } div.menu-bar li:hover > ul { display: block; }<div class=\"menu-bar\"> <ul> <li> <a href=\"example.html\">Menu</a> <ul> <li> <a href=\"example.html\">Link</a> </li> <li> <a class=\"menu-nav\" href=\"example.html\">Submenu</a> <ul> <li> <a class=\"menu-nav\" href=\"example.html\">Submenu</a> <ul> <li><a href=\"example.html\">Link</a></li> <li><a href=\"example.html\">Link</a></li> <li><a href=\"example.html\">Link</a></li> <li><a href=\"example.html\">Link</a></li> </ul> </li> <li><a href=\"example.html\">Link</a></li> </ul> </li> </ul> </li> </ul> </div>   en"]
    - [color_value, "The <color> CSS data type denotes a color in the sRGB color space. A color can be described using a keyword, using the RGB cubic-coordinate system (via the #-hexadecimal or the rgb() and rgba() functional notations) or using the HSL cylindrical-coordinate system (via the hsl() and hsla() functional notations).    en"]
    - [color_value, "The <color> CSS data type denotes a color in the sRGB color space. A color can be described using a keyword, using the RGB cubic-coordinate system (via the #-hexadecimal or the rgb() and rgba() functional notations) or using the HSL cylindrical-coordinate system (via the hsl() and hsla() functional notations).    en"]
    - [hyphens, "The hyphens CSS property tells the browser how to go about splitting words to improve the layout of text when line-wrapping. hyphens: none | manual | auto   en"]
    - [identifier, "The <identifier> CSS data value denotes an arbitrary user-defined string used as an identifier.    en"]
    - [image, "The <image> CSS data type represents a 2D image. There are two kinds of images in CSS: plain static images, often referenced using a URL, and dynamically-generated images like gradients or representations of parts of the tree.    en"]
    - ["image-rendering", "The image-rendering CSS property provides a hint to the user agent about how to handle its image rendering. image-rendering applies to scaled images (and other elements, see below). For example, if the natural size of the image is 100×100px but the page author specifies the dimensions to 200×200px (or50×50px), then the image will be upscaled (or downscaled) to the new dimensions using the specified algorithm. Scaling may also apply due to user interaction (zooming). image-rendering: auto | inherit | optimizeSpeed | optimizeQuality | -moz-crisp-edges | -o-crisp-edges   en"]
    - ["ime-mode", "The ime-mode CSS property controls the state of the input method editor for text fields. ime-mode: auto | normal | active | inactive | disabled   en"]
    - ["@import", "The @import CSS at-rule allows to import style rules from other style sheets. These rules must precede all other types of rules, except @charset rules; as it is not a nested statement, it cannot be used inside conditional group at-rules. @import url; or @import url list-of-media-queries;   en"]
    - [":indeterminate", "The :indeterminate CSS pseudo-class represents any <input type=\"checkbox\"> element whose indeterminate DOM property is set to true by JavaScript."]
    - [inherit, "The inherit value is allowed on every CSS property. It causes the element for which it is specified to take the Computed value of the property from its parent element. /* make second-level headers green */ h2 { color: green; } /* ...but leave those in the sidebar alone so they use their parent's color */ #sidebar h2 { color: inherit; } div#current { color: blue; }   en"]
    - [initial, "The -moz-initial CSS keyword is a Mozilla implementation of CSS3 initial. Applies the initial value of a property to an element. /* give headers a green border */ h2 { border: medium solid green } /* but make those in the sidebar use the value of the \"color\" property */ #sidebar h2 { border-color: -moz-initial; border-color: initial; } <p style=\"color:red\"> this text is red <em style=\"color:-moz-initial; color:initial\"> this text is in the initial color (e.g. black) </em> this is red again </p>   en"]
    - [integer, "The <integer> CSS data type denotes an integer number, positive or negative. There isn't any associated unit with the value. An integer consists of one or several decimal digit, 0 to 9, eventually preceded by one single + or - sign.    en"]
    - [":invalid", "The :invalid pseudo-class represents any <input> or <form> element whose content fails to validate according to the input's type setting. This allows you to easily have invalid fields adopt an appearance that helps the user identify and correct errors.    en"]
    - ["justify-content", "The justify-content CSS property aligns flex items in the main-axis of the current line. The alignment is done after the lengths and auto margins are applied. Formal grammar: <justify-content> where <justify-content> is flex-start | flex-end | center | space-between | space-around justify-content: flex-start | flex-end | center | space-between | space-around   en"]
    - ["@keyframes", "@keyframes lets authors control the intermediate steps in a CSS animation sequence by establishing keyframes (or waypoints) along the animation sequence that must be reached by certain points during the animation. This gives you more specific control over the intermediate steps of the animation sequence than you get when letting the browser handle everything automatically.    en"]
    - [":lang", "The :lang(language-code pseudo-class matches elements based on the langauge the element is determined to be in. In HTML, the language is determined by a combination of the lang attribute, the <meta> element, and possibly by information from the protocol (such as HTTP headers). For other document types there may be other document methods for determining the language. element:lang(language-code) { style properties }   en"]
    - [":last-child", "The :last-child pseudo-class represents any element that is the last child element of its parent. element:last-child { style properties }   en"]
    - [":last-of-type", "The :last-of-type CSS pseudo-class represents the last sibling of the given type in the list of children of its parent element. element:last-of-type { style properties }   en"]
    - [left, "The left CSS property specifies part of the position of positioned elements. left: <length> | <percentage> | auto | inherit ;   en"]
    - [":left", "The :left page pseudo-class matches any left page when printing a page. It allows to describe the styling of left-side pages. @page :left { margin:2in 3in; }   en"]
    - [length, "The <length> CSS data type denotes distance measurements. It is a <number> immediately followed by a length unit (px, em, pc, in, mm, ...). Like for any CSS dimension, there is no space between the unit literal and the number.    en"]
    - ["letter-spacing", "The letter-spacing CSS property specifies spacing behavior between text characters. letter-spacing: normal | <length>   en"]
    - ["linear-gradient", "Vendor prefixes: See the compatibility table below for detail on the vendor prefixes you'll need to use for gradients.    en"]
    - [":link", "The :link CSS pseudo-class lets you select links inside elements. This will select any link, even those already styled using selector with other link-related pseudo-classes like :hover , :active or :visited . In order to style only non-visited links, you need to put the :link rule before the other ones, as defined by the LVHA-order: :link — :visited — :hover — :active. a:link {color:slaygrate;} .external:link {background-color:lightblue;}   en"]
    - ["line-height", "On inline elements, the line-height CSS property specifies the height that is used in the calculation of the line box height. On block level elements, line-height specifies the minimal height of line boxes within the element. line-height: normal | <number> | <length> | <percentage>   en"]
    - ["list-style", "The list-style CSS property is a shorthand property for setting list-style-type , list-style-image and list-style-position . list-style: list-style-type || list-style-position || list-style-image   en"]
    - ["list-style-image", "The list-style-image CSS property sets the image that will be used as the list item marker. It is often more convenient to use the shortcut list-style . list-style-image: <uri> | none | inherit   en"]
    - ["list-style-position", "The list-style-position CSS property specifies the position of the marker box in the principal block box. It is often more convenient to use the shortcut list-style . list-style-position: inside | outside | inherit   en"]
    - ["list-style-type", "The list-style-type CSS property specifies appearance of a list item element. As it is the only one who defaults to display:list-item, this is usually a <li> element, but can be any element with this display value. list-style-type: <list-style-type> | none | inherit   en"]
    - [margin, "The margin CSS property sets the margin for all four sides. It is a shorthand to avoid setting each side separately with the other margin properties: margin-top , margin-right , margin-bottom and margin-left . Negative value are also allowed. margin: <length> {1,4} | <percentage> {1,4} | inherit | auto   en"]
    - ["margin-bottom", "The margin-bottom CSS property of an element sets the margin space required on the bottom of an element. A negative value is also allowed. margin-bottom: <length> | <percentage> | inherit | auto ;   en"]
    - ["margin-left", "The margin-left CSS property of an element sets the margin space required on the left side of an element. A negative value is also allowed. margin-left: <length> | <percentage> | inherit | auto ;   en"]
    - ["margin-right", "The margin-right CSS property of an element sets the margin space required on the right side of an element. A negative value is also allowed. margin-right: <length> | <percentage> | inherit | auto ;   en"]
    - ["margin-top", "The margin-top CSS property of an element sets the margin space required on the top of an element. A negative value is also allowed. margin-top: <length> | <percentage> | inherit | auto   en"]
    - ["marker-offset", "marker-offset: <value>   en"]
    - [marks, "The marks CSS property adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets. marks: [ crop || cross ] | none   en"]
    - [mask, "mask: <uri> | none | inherit   en"]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["max-height", "The max-height CSS property is used to set the maximum height of a given element. It prevents the used value of the height property from becoming larger than the value specified for max-height. max-height: <length> | <percentage> | none | inherit   en"]
    - ["max-width", "The max-width CSS property is used to set the maximum width of a given element. It prevents the used value of the width property from becoming larger than the value specified for max-width. max-width: <length> | <percentage> | none | -moz-max-content | -moz-min-content | -moz-fit-content | -moz-available   en"]
    - ["@media", "The @media CSS at-rule associates a set of nested statements, in a CSS block, that is delimited by curly braces, with a condition defined by a media query. The @media at-rule may be used not only at the top level of a CSS, but also inside any CSS conditional-group at-rule. @media <media types> { /* media-specific rules */ }   en"]
    - ["min-height", "The min-height CSS property is used to set the minimum height of a given element. It prevents the used value of the height property from becoming smaller than the value specified for min-height. min-height: <length> | <percentage> | auto | inherit   en"]
    - ["min-width", "The min-width CSS property is used to set the minimum width of a given element. It prevents the used value of the width property from becoming smaller than the value specified for min-width. min-width: <length> | <percentage> | auto | -moz-max-content | -moz-min-content | -moz-fit-content | -moz-available   en"]
    - [none, "none is a common value for most CSS properties. It is often the default value, but can always be considered as a sort of \"standard\" value. It is comparable to the value normal , used in a similar manner for other properties.    en"]
    - [normal, "normal is a common value for some CSS properties. It is often the default value, but can always be considered as a sort of \"standard\" value. It is comparable to the value none , used in a similar manner for other properties.    en"]
    - [":not", "The negation pseudo-class, :not(X), is a functional notation taking a simple selector X as an argument. It matches an element that is not represented by the argument. X must not contain another negation selector, or any pseudo-elements. :not(selector) { style properties }   en"]
    - [":nth-child", "The :nth-child pseudo-class matches an element that has an+b-1 siblings before it in the document tree, for a given positive or zero value for n, and has a parent element. element:nth-child(an + b) { style properties }   en"]
    - [":nth-last-child", "The :nth-last-child pseudo-class matches an element that has an+b-1 siblings after it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child for a more thorough description of the syntax of its argument. element:nth-last-child(an + b) { style properties }   en"]
    - [":nth-last-of-type", "The :nth-last-of-type pseudo-class matches an element that has an+b-1 siblings with the same element name after it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child for a more thorough description of the syntax of its argument. element:nth-last-of-type(an + b) { style properties }   en"]
    - [":nth-of-type", "The :nth-of-type pseudo-class matches an element that has an+b-1 siblings with the same element name before it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child for a more thorough description of the syntax of its argument. This is a more flexible and useful pseudo selector if you want to ensure you're selecting the same type of tag no matter where it is inside the parent element, or what other different tags appear before it. element:nth-of-type(an + b) { style properties }   en"]
    - [number, "Values of the <number> CSS data type can be interpolated in order to allow animations. In that case they are interpolated as real, floating-point, numbers. [1] The speed of the interpolation is determined by the timing function associated with the animation. 12 A raw <integer> is also a <number> 4.01 A positive non-integer <number> -456.8 Negative non-integer <number> 0.0 Zero +0.0 Zero, with a leading + -0.0 Zero, with a leading - (Though strange, this is an allowed value) .60 Digits are optional before the dot 12. The dot should be followed by a number +---12.2 Only one leading +/- is allowed 12.1.1 Only one dot is allowed 10e3 The e notation is not allowed   en"]
    - [":only-child", "The :only-child pseudo-class represents any element which is the only child of its parent. This is the same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity. parent child:only-child { property:value; }   en"]
    - [":only-of-type", "The :only-of-type pseudo-class represents any element that has no siblings of the given type. element:only-of-type { style properties }   en"]
    - [opacity, "The opacity CSS property specifies the transparency of an element, that is, the degree to which the background behind the element is overlaid. opacity: <number> | inherit   en"]
    - [":optional", "The :optional CSS pseudo-class represents any <input> element that does not have the required attribute set on it. This allows forms to easily indicate optional fields, and to style them accordingly.    en"]
    - [order, "The order CSS property specifies the order used to lay out flex items in their flex container. Elements are laid out by ascending order of the order value. Elements with the same order value are laid out in the order they appear in the source code. Formal grammar: <number> order: <number>   en"]
    - [orphans, "The orphans CSS property refers to the minimum number of lines in a block container that must be left at the bottom of the page. This property is normally used to control how page breaks occur. orphans: <integer> | inherit   en"]
    - [outline, "The outline CSS property is a shorthand property for setting one or more of the individual outline properties outline-style , outline-width and outline-color in a single rule. In most cases the use of this shortcut is preferable and more convenient. outline: [ <outline-width> || <outline-style> || <outline-color> ] | inherit   en"]
    - ["outline-color", "The outline-color CSS property sets the color of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out. outline-color: <color> | invert | inherit   en"]
    - ["outline-offset", "The outline-offset CSS property is used to set space between an outline and the edge or border of an element. An outline is a line that is drawn around elements, outside the border edge. outline-offset: <length> | inherit   en"]
    - ["outline-style", "The outline-style CSS property is used to set the style of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out. outline-style: auto | <border-style> | inherit   en"]
    - ["outline-width", "The outline-width CSS property is used to set the width of the outline of an element. An outline is a line that is drawn around elements, outside the border edge, to make the element stand out: outline-width: thin | medium | thick | <length> | inherit   en"]
    - [overflow, "The overflow CSS property specifies whether to clip content, render scroll bars or display overflow content of a block-level element. overflow: visible | hidden | scroll | auto | inherit   en"]
    - ["overflow-wrap", en]
    - ["overflow-x", "The overflow-x CSS property specifies whether to clip content, render a scroll bar or display overflow content of a block-level element, when it overflows at the left and right edges. overflow-x: visible | hidden | scroll | auto   en"]
    - ["overflow-y", "The overflow-y CSS property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the top and bottom edges. overflow-y: visible | hidden | scroll | auto   en"]
    - [padding, "The padding CSS property sets the required padding space on all sides of an element. The padding area is the space between the content of the element and its border. Negative values are not allowed. padding: [ <length> | <percentage> ] {1,4}   en"]
    - ["padding-bottom", "The padding-bottom CSS property of an element sets the padding space required on the bottom of an element. The padding area is the space between the content of the element and it's border. A negative value is not allowed. padding-bottom: <length> | <percentage> | inherit ;   en"]
    - ["padding-left", "The padding-left CSS property of an element sets the padding space required on the left side of an element. The padding area is the space between the content of the element and it's border. A negative value is not allowed. padding-left: <length> | <percentage> | inherit ;   en"]
    - ["padding-right", "The padding-right CSS property of an element sets the padding space required on the right side of an element. The padding area is the space between the content of the element and its border. Negative values are not allowed. padding-right: <length> | <percentage> | inherit ;   en"]
    - ["padding-top", "The padding-top CSS property of an element sets the padding space required on the top of an element. The padding area is the space between the content of the element and it's border. A negative values is not allowed. padding-bottom: <length> | <percentage> | inherit ;   en"]
    - ["@page", "The @page rule is used to modify some CSS properties when printing a document. @page :pseudo-class { margin:2in; }   en"]
    - ["page-break-after", "The page-break-after CSS property adjusts page breaks after the current element. page-break-after: auto | always | avoid | left | right | inherit   en"]
    - ["page-break-before", "The page-break-before CSS property adjusts page breaks before the current element. page-break-before: auto | always | avoid | left | right | inherit   en"]
    - ["page-break-inside", "The page-break-inside CSS property adjusts page breaks inside the current element. page-break-inside: auto | avoid | inherit   en"]
    - [percentage, "The <percentage> CSS data types represent a percentage value. Many CSS properties can take percentage values, often to define sizes in terms of parent objects. Percentages are formed by a <number> immediately followed by the percentage sign %. Like for all unit in CSS, there is no space between the '%' and the number.    en"]
    - [perspective, "The perspective CSS property determines the distance between the z=0 plane and the user in order to give to the 3D-positioned element some perspective. Each 3D element that is placed between the z=0 and the user is enlarged, each 3D-element with z<0 is shrinked. How much deformation is defined by the value of this property. perspective: none or perspective: depth   en"]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["perspective-origin", "The perspective-origin CSS property determines the position the viewer is looking at. It is used as the vanishing point by the perspective property. perspective-origin: x-position or perspective-origin: x-position y-position When both x-position and y-position are keywords, the following is also valid: perspective-origin: y-position x-position   en"]
    - ["pointer-events", "The CSS property pointer-events allows authors to control under what circumstances (if any) a particular graphic element can become the target of mouse events. When this property is unspecified, the same characteristics of the visiblePainted value apply to SVG content. pointer-events: auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit   en"]
    - [position, "The position CSS property chooses alternative rules for positioning elements, designed to be useful for scripted animation effects. position: static | relative | absolute | fixed | inherit   en"]
    - [quotes, "The quotes CSS property indicates how user agents should render quotation marks. quotes: [<string> <string>]+ | none | inherit   en"]
    - ["radial-gradient", en]
    - [ratio, "The <ratio> CSS data type, used for describing aspect ratios in media queries, denotes the proportion between two unitless values. It is a strictly positive <integer> followed by a slash ('/', Unicode U+002F SOLIDUS) and a second strictly positive <integer> . There may be spaces before and after the solidus.    en"]
    - [":read-write", "The :read-write pseudo-class matches when an element is editable by user like text input element.    en"]
    - [shape, "The <shape> CSS data type denotes the specific form of a region. This region is used to define on which part of an element some properties like clip do apply. rect(top, right, bottom, left) img.clip04 { clip: rect(10px, 20px, 20px, 10px); }   en"]
    - ["repeating-linear-gradient", "Vendor prefixes: See the compatibility table below for detail on the vendor prefixes you'll need to use for gradients.    en"]
    - ["repeating-radial-gradient", en]
    - [":required", "The :required CSS pseudo-class represents any <input> element that has the required attribute set on it. This allows forms to easily indicate which fields must have valid data before the form can be submitted.    en"]
    - [resize, "The resize CSS property lets you control the resizability of an element. resize: none | both | horizontal | vertical | inherit   en"]
    - [resolution, "The <resolution> CSS data types, used in media queries, denotes the density of pixels of an output device, its resolution. It is a <number> immediately followed by a unit of resolution (dpi, dpcm, ...). Like for any CSS dimension, there is no space between the unit literal and the number.    en"]
    - [color_value, "The <color> CSS data type denotes a color in the sRGB color space. A color can be described using a keyword, using the RGB cubic-coordinate system (via the #-hexadecimal or the rgb() and rgba() functional notations) or using the HSL cylindrical-coordinate system (via the hsl() and hsla() functional notations).    en"]
    - [color_value, "The <color> CSS data type denotes a color in the sRGB color space. A color can be described using a keyword, using the RGB cubic-coordinate system (via the #-hexadecimal or the rgb() and rgba() functional notations) or using the HSL cylindrical-coordinate system (via the hsl() and hsla() functional notations).    en"]
    - [right, "The right CSS property specifies part of the position of positioned elements. right: <length> | <percentage> | auto | inherit ;   en"]
    - [":right", "The :right page pseudo-class matches any right page when printing a page. It allows to describe the styling of right-side page. @page :right { margin: 2in 3in; }   en"]
    - [":root", "The :root pseudo-class matches the root element of a tree representing the document. In HTML, :root represents the <html> element and is identical to the selector html, except that its specifity is higher.    en"]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["::selection", "The ::selection CSS pseudo-element applies rules to the portion of a document that has been highlighted (e.g., selected with the mouse or another pointing device) by the user. /* draw any selected text yellow on red background */ ::-moz-selection { color: gold; background: red; } ::selection { color: gold; background: red; } /* draw selected text in a paragraph white on black */ p::-moz-selection { color: white; background: black; } p::selection { color: white; background: black; }   en"]
    - [shape, "The <shape> CSS data type denotes the specific form of a region. This region is used to define on which part of an element some properties like clip do apply. rect(top, right, bottom, left) img.clip04 { clip: rect(10px, 20px, 20px, 10px); }   en"]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["timing-function", "The <timing-function> CSS data type denotes a mathematical function that describes how fast one-dimensional values change during transitions or animations. This in essence lets you establish an acceleration curve, so that the speed of the animation can vary over its duration. cubic-bezier(x1, y1, x2, y2) cubic-bezier(0.1, 0.7, 1.0, 0.1) The canonical Bézier curve with four <number> in the [0,1] range. cubic-bezier(0, 0, 1, 1) Using <integer> is valid as any <integer> is also a <number>. cubic-bezier(-0.2, 0.6, -0.1, 0) Negative values for abscissas are valid, leading to bouncing effects. cubic-bezier(1.1, 0, 4, 0) Values > 1.0 for abscissas are also valid. cubic-bezier(0.1, red, 1.0, green) Though the animated output type may be a color, Bézier curves work w/ numerical ratios. cubic-bezier(0.1, 4, 0.6, 2.45) Ordinates must be in the [0, 1] range or the curve is not a function of time. cubic-bezier(0.3, 2.1) The two points must be defined, there is no default value. cubic-bezier(0.3, -1.9, 2.1, -0.2) Ordinates must be in the [0, 1] range or the curve is not a function of time. steps(number_of_steps, direction) steps(5, end) There is 5 treads, the last one happens right before the end of the animation. steps(2, start) A two-step staircase, the first one happening at the start of the animation. steps(2.0, end) The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start) The amount of steps must be non-negative. steps(0, end) There must be at least one step. steps(2) The second parameter is not optional. steps(start, 3) Though of different types, the order of parameter is important. step(1, end) Even if there is one step, the function name is steps, with the plural 's' steps(3 end) The two parameters must be separated with a comma; one or several spaces is not enough.   en"]
    - [string, en]
    - ["table-layout", "The table-layout CSS property defines the algorithm to be used to layout the table cells, rows, and columns. table-layout: inherit | auto | fixed   en"]
    - ["tab-size", "The tab-size CSS property is used to customize the width of a tab (U+0009) character. tab-size: <integer> | inherit pre { tab-size: 4; /* Set tab size to 4 spaces */ } pre { tab-size: 0; /* Remove indentation */ } pre { tab-size: 99; /* Don't use tabs! */ }   en"]
    - ["text-align", "The text-align CSS property describes how inline content like text is aligned in its parent block element. text-align does not control the alignment of block elements itself, only their inline content. text-align: left | center | right | justify | start | end | -moz-left | -moz-center | -moz-right | inherit   en"]
    - ["text-align-last", "The text-align-last CSS property describes how the last line of a block or a line, right before a forced line break, is aligned. text-align-last: auto | start | end | left | right | center | justify | inherit div { text-align: justify; -moz-text-align-last: center; text-align-last: center; }   en"]
    - ["text-decoration", "The text-decoration CSS property is used to set the text formattings underline, overline, line-through and blink. text-decoration: none | [underline || overline || line-through || blink] | inherit   en"]
    - ["text-decoration-color", "The text-decoration-color CSS property sets the color used when drawing underlines, overlines, or strike-throughs specified by text-decoration-line . This is the preferred way to color these text decorations, rather than using combinations of other HTML elements. text-decoration-color: <color> | inherit   en"]
    - ["text-decoration-line", "The text-decoration-line CSS property sets what kind of line decorations are added to an element. text-decoration-line: none | underline || overline || line-through   en"]
    - ["text-decoration-style", "The text-decoration-style CSS property defines the style of the lines specified by text-decoration-line . The style applies to all lines, there is no way to define different style for each of the line defined by text-decoration-line. text-decoration-style: inherit or text-decoration-style: style   en"]
    - ["text-indent", "The text-indent CSS property specifies how much horizontal space should be left before the beginning of the first line of the text content of an element. Horizontal spacing is with respect to the left (or right, for right-to-left layout) edge of the containing block element's box. text-indent: <length> | <percentage> && [ hanging || each-line ]   en"]
    - ["text-overflow", "The text-overflow CSS property determines how overflowed content that is not displayed is signaled to the users. It can be clipped, display an ellipsis ('…', U+2026 Horizontal Ellipsis) or a Web author-defined string. text-overflow: inherit or text-overflow: end-overflow-type or text-overflow: left-overflow-type right-overflow-type /* This syntax is still experimental and may be pushed to CSS4 */   en"]
    - ["text-rendering", "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text. The browser makes trade-offs among speed, legibility, and geometric precision. The text-rendering property is an SVG property that is not defined in any CSS standard. However, Gecko and WebKit browsers let you apply this property to HTML and XML content on Windows, Mac OS X and Linux. text-rendering: auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit   en"]
    - ["text-shadow", "The text-shadow CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and text-decorations of the element. text-shadow: none | [<shadow>,]* <shadow> where <shadow> is: [ <color>? <offset-x> <offset-y> <blur-radius>? | <offset-x> <offset-y> <blur-radius>? <color>? ]   en"]
    - ["text-transform", "The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. text-transform: none | [ [capitalize | uppercase | lowercase ] || full-width || full-size-kana ]   en"]
    - [time, "The <time> CSS data type denotes time dimensions expressed in seconds or milliseconds. They consists of a <number> immediately followed by the unit. Like for any CSS dimension, there is no space between the unit literal and the number. 12s Positive integer -456ms Negative integer 4.3ms Non-integer 14mS The unit is case-insensitive, though capital letters are not recommended for s and ms. +0s Zero, with a leading + and the unit -0ms Zero, with a leading - and the unt(Though strange, this is an allowed value) 0 While unitless zero is allowed for <length>, it's invalid for all other units. 12.0 This is a <number>, not a <time>, it must have a unit 7 ms No space is allowed between the <number> and the unit   en"]
    - ["timing-function", "The <timing-function> CSS data type denotes a mathematical function that describes how fast one-dimensional values change during transitions or animations. This in essence lets you establish an acceleration curve, so that the speed of the animation can vary over its duration. cubic-bezier(x1, y1, x2, y2) cubic-bezier(0.1, 0.7, 1.0, 0.1) The canonical Bézier curve with four <number> in the [0,1] range. cubic-bezier(0, 0, 1, 1) Using <integer> is valid as any <integer> is also a <number>. cubic-bezier(-0.2, 0.6, -0.1, 0) Negative values for abscissas are valid, leading to bouncing effects. cubic-bezier(1.1, 0, 4, 0) Values > 1.0 for abscissas are also valid. cubic-bezier(0.1, red, 1.0, green) Though the animated output type may be a color, Bézier curves work w/ numerical ratios. cubic-bezier(0.1, 4, 0.6, 2.45) Ordinates must be in the [0, 1] range or the curve is not a function of time. cubic-bezier(0.3, 2.1) The two points must be defined, there is no default value. cubic-bezier(0.3, -1.9, 2.1, -0.2) Ordinates must be in the [0, 1] range or the curve is not a function of time. steps(number_of_steps, direction) steps(5, end) There is 5 treads, the last one happens right before the end of the animation. steps(2, start) A two-step staircase, the first one happening at the start of the animation. steps(2.0, end) The first parameter must be an <integer> and cannot be a real value, even if it is equal to one. steps(-3, start) The amount of steps must be non-negative. steps(0, end) There must be at least one step. steps(2) The second parameter is not optional. steps(start, 3) Though of different types, the order of parameter is important. step(1, end) Even if there is one step, the function name is steps, with the plural 's' steps(3 end) The two parameters must be separated with a comma; one or several spaces is not enough.   en"]
    - [top, "The top CSS property specifies part of the position of positioned elements. It has no effect on non-positioned elements. top: <length> | <percentage> | auto | inherit   en"]
    - [transform, "The transform CSS property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled, and skewed according to the values set. transform: <transform-function> [<transform-function>]* | none   en"]
    - ["transform-origin", "The transform-origin CSS property lets you modify the origin for transformations of an element. For example, the transform-origin of the rotate() function is the centre of rotation. (This property is applied by first translating the element by the negated value of the property, then applying the element's transform, then translating by the property value.) transform-origin: [ <percentage> | <length> | left | center | right ] [ <percentage> | <length> | top | center | bottom ] ? transform-origin: [ left | center | right ] || [ top | center | bottom ]   en"]
    - ["transform-style", "The transform-style CSS property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element. transform-style: preserve-3d or transform-style: flat   en"]
    - [transition, "The transition CSS property is a shorthand property for transition-property , transition-duration , transition-timing-function , and transition-delay . transition: [ <transition-property> || <transition-duration> || <transition-timing-function> || <transition-delay> ]   en"]
    - ["transition-delay", "The transition-delay CSS property specifies the amount of time to wait between a change being requested to a property that is to be transitioned and the start of the transition effect. transition-delay: time[, time]*   en"]
    - ["transition-duration", "The transition-duration CSS property specifies the number of seconds or milliseconds a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur. transition-duration: time[, time]*   en"]
    - ["transition-property", "The transition-property CSS property is used to specify the names of CSS properties to which a transition effect should be applied. transition-property: none | all | [<property-name>][, <property-name>]*   en"]
    - ["transition-timing-function", "The transition-timing-function CSS property is used to describe how the intermediate values of the CSS properties being affected by a transition effect are calculated. This in essence lets you establish an acceleration curve, so that the speed of the transition can vary over its duration. transition-timing-function: <timing-function> [, <timing-function>]*   en"]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["transform-function", There are several coordinates model used when describing transformation. The most usual are the Cartesian coordinates and the homogenous coordinates.    en]
    - ["unicode-bidi", "The unicode-bidi CSS property together with the direction property relates to the handling of bidirectional text in a document. For example, if a block of text contains both left-to-right and right-to-left text then the user-agent uses a complex Unicode algorithm to decide how to display the text. This property overrides this algorithm and allows the developer to control the text embedding. unicode-bidi: [ normal | embed | [ isolate || bidi-override ] | plaintext | inherit ] ;   en"]
    - [uri, "The <url> CSS data type denotes a pointer to a resource. It has no proper syntax and can only be expressed through the url() functional notation.    en"]
    - [uri, "The <url> CSS data type denotes a pointer to a resource. It has no proper syntax and can only be expressed through the url() functional notation.    en"]
    - [":valid", "The :valid CSS pseudo-class represents any <input> element whose content validates correctly according to the input's type setting. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.    en"]
    - ["vertical-align", "The vertical-align CSS property specifies the vertical alignment of an inline or table-cell element.    en"]
    - [visibility, "The visibility CSS property is used for two things: visibility: visible | hidden | collapse | inherit p { visibility: hidden; } /* paragraphs won't be visible */ p.showme { visibility: visible; } /* except of these with class showme */ tr.col { visibility: collapse; } /* table rows with class col will collapse */   en"]
    - [":visited", "The :visited pseudo-class lets you select only links that have been visited. This style may be overridden by any other link-related pseudo-classes, that is :link , :hover , and :active , appearing in subsequent rules. In order to style appropriately links, you need to put the :visited rule after the :link rule but before the other ones, defined in the LVHA-order: :link — :visited — :hover — :active. a:visited { color: #4b2f89; } a:visited { background-color: white }   en"]
    - ["white-space", "The white-space CSS property is used to to describe how whitespace inside the element is handled. white-space: normal | pre | nowrap | pre-wrap | pre-line | inherit   en"]
    - [widows, "The widows CSS property defines how many minimum lines must be left on top of a new page, on a paged media. In typography, a widow is the last line of a paragraph appearing alone at the top of a page. Setting the widows property allows to prevent widows to be left. On a non-paged media, like screen, the widows CSS property has no effect. widows: <number>   en"]
    - [width, "The width CSS property specifies the width of the content area of an element. The content area is inside the padding, border, and margin of the element. width: <length> | <percentage> | auto | max-content | min-content | fit-content | available   en"]
    - ["word-break", "The word-break CSS property is used to to specify how (or if) to break lines within words. word-break: normal | break-all | keep-all   en"]
    - ["word-spacing", "The word-spacing CSS property specifies spacing behavior between tags and words. word-spacing: normal | <length> #mozdiv1 { word-spacing: 15px; } #mozdiv2 { word-spacing: 5em; }   en"]
    - ["word-wrap", "The word-wrap CSS property is used to to specify whether or not the browser is allowed to break lines within words in order to prevent overflow when an otherwise unbreakable string is too long to fit. word-wrap: normal | break-word   en"]
    - ["z-index", "The z-index CSS property specifies the z-order of an element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one. z-index: auto | <integer> | inherit   en"]

